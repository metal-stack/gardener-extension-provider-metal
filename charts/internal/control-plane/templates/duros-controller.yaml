{{- if .Values.duros.enabled }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: duros-controller
  namespace: {{ .Release.Namespace }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: duros-controller
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups:
  - storage.metal-stack.io
  resources:
  - duros
  - duros/status
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  - coordination.k8s.io
  resources:
  - configmaps
  - leases
  - events
  verbs:
  - get
  - watch
  - update
  - patch
  - create
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: duros-controller
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: duros-controller
subjects:
- kind: ServiceAccount
  name: duros-controller
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app: duros-controller
  name: duros-admin
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  admin-key: {{ required ".Values.duros.controller.adminKey is required" (b64enc .Values.duros.controller.adminKey) }}
  admin-token: {{ required ".Values.duros.controller.adminToken is required" (b64enc .Values.duros.controller.adminToken) }}
{{- if .Values.duros.controller.apiEndpoint }}
  api-ca: {{ required ".Values.duros.controller.apiCA is required" (b64enc .Values.duros.controller.apiCA) }}
  api-cert: {{ required ".Values.duros.controller.apiCert is required" (b64enc .Values.duros.controller.apiCert) }}
  api-key: {{ required ".Values.duros.controller.apiKey is required" (b64enc .Values.duros.controller.apiKey) }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: duros-controller
  namespace: {{ .Release.Namespace }}
  labels:
    app: duros-controller
spec:
  selector:
    matchLabels:
      app: duros-controller
  replicas: {{ .Values.duros.replicas }}
  template:
    metadata:
      labels:
        app: duros-controller
        networking.gardener.cloud/from-prometheus: "allowed"
        networking.gardener.cloud/to-dns: "allowed"
        networking.gardener.cloud/to-shoot-apiserver: "allowed"
        networking.gardener.cloud/to-private-networks: "allowed"
        networking.gardener.cloud/to-public-networks: "allowed"
        networking.gardener.cloud/to-runtime-apiserver: "allowed"
        networking.resources.gardener.cloud/to-kube-apiserver-tcp-443: "allowed"
        networking.resources.gardener.cloud/to-duros-storage-tcp-443: allowed
        networking.resources.gardener.cloud/to-duros-storage-tcp-4420: allowed
        networking.resources.gardener.cloud/to-duros-storage-tcp-8009: allowed
    spec:
      # required to be able to read the duros cr from the seed
      automountServiceAccountToken: true
      serviceAccountName: duros-controller
      containers:
      - name: duros-controller
        args:
          - -endpoints=duros-storage:443
          - -namespace={{ .Release.Namespace }}
          - -enable-leader-election
          - -admin-token=/duros/admin-token
          - -admin-key=/duros/admin-key
          - -shoot-kubeconfig=/var/run/secrets/gardener.cloud/shoot/generic-kubeconfig/kubeconfig
          - -psp-disabled={{ .Values.pspDisabled }}
{{- if .Values.duros.controller.apiEndpoint }}
          - -api-endpoint={{ .Values.duros.controller.apiEndpoint }}
          - -api-ca=/duros/api-ca
          - -api-cert=/duros/api-cert
          - -api-key=/duros/api-key
{{- end }}
        image: {{ index .Values.images "duros-controller" }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        resources:
          limits:
            cpu: 400m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 20Mi
        volumeMounts:
          - name: duros-admin
            mountPath: /duros
          - name: kubeconfig
            mountPath: /var/run/secrets/gardener.cloud/shoot/generic-kubeconfig
            readOnly: true
      volumes:
        - name: duros-admin
          secret:
            secretName: duros-admin
        - name: kubeconfig
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: kubeconfig
                  path: kubeconfig
                name: {{ .Values.genericTokenKubeconfigSecretName }}
                optional: false
            - secret:
                items:
                - key: token
                  path: token
                name: shoot-access-duros-controller
                optional: false
---
apiVersion: v1
kind: Service
metadata:
  name: duros-storage
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - port: 443
      name: api
      protocol: TCP
      targetPort: 443
    - port: 4420
      name: data
      protocol: TCP
      targetPort: 4420
    - port: 8009
      name: control
      protocol: TCP
      targetPort: 8009
---
apiVersion: discovery.k8s.io/v1
kind: EndpointSlice
metadata:
  name: duros-storage
  namespace: {{ .Release.Namespace }}
  labels:
    kubernetes.io/service-name: duros-storage
addressType: IPv4
ports:
  - port: 443
    name: api
    protocol: TCP
  - port: 4420
    name: data
    protocol: TCP
  - port: 8009
    name: control
    protocol: TCP
endpoints:
{{- range $endpoint := .Values.duros.controller.endpoints }}
  - addresses:
    - {{ (split ":" $endpoint)._0 }}
{{- end }}
---
apiVersion: storage.metal-stack.io/v1
kind: Duros
metadata:
  namespace: {{ .Release.Namespace }}
  name: shoot-default-storage
spec:
  metalProjectID: {{ required ".Values.duros.projectID is required" .Values.duros.projectID }}
{{- if .Values.duros.storageClasses }}
  storageClasses:
{{ toYaml .Values.duros.storageClasses | indent 4 }}
{{- end }}
{{- end }}
